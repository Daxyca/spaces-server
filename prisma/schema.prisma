// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id        String    @id @default(cuid())
  username  String?   @unique
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profile   Profile?
  account   Account[]
}

model Account {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  provider       String
  providerUserId String?
  passwordHash   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([provider, providerUserId])
}

model Follow {
  status      FollowStatus @default(Pending)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  following   Profile      @relation(fields: [followingId], references: [id])
  followingId String
  follower    Profile      @relation("AsFollower", fields: [followerId], references: [id])
  followerId  String

  @@id([followerId, followingId])
}

enum FollowStatus {
  Pending
  Accepted
}

model Profile {
  id             String      @id // user.id
  user           User        @relation(fields: [id], references: [id])
  displayName    String
  posts          Post[]
  comments       Comment[]
  spacesCreated  Space[]     @relation("SpaceAuthor")
  spacesIncluded Space[]
  likedPosts     Post[]      @relation("PostLikes")
  likedComments  Comment[]   @relation("CommentLikes")
  following      Follow[]    @relation("AsFollower")
  followers      Follow[]
  picture        String?
  firstName      String?
  lastName       String?
  birthDate      DateTime?
  bio            String?
  sexAtBirth     SexAtBirth?
  location       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum SexAtBirth {
  Male
  Female
}

model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    Profile   @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Profile[] @relation("PostLikes")
  comments  Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    Profile   @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  likes     Profile[] @relation("CommentLikes")
}

model Space {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    Profile   @relation("SpaceAuthor", fields: [authorId], references: [id])
  authorId  String
  users     Profile[]

  @@unique([authorId, name])
}
