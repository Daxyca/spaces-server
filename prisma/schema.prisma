// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  profile      Profile?
}

model Follow {
  status      FollowStatus @default(Pending)
  createdAt   DateTime     @default(now())
  following   Profile      @relation("Following", fields: [followingId], references: [userId])
  followingId String
  follower    Profile      @relation("Followers", fields: [followerId], references: [userId])
  followerId  String

  @@id([followerId, followingId])
}

enum FollowStatus {
  Pending
  Accepted
}

model Profile {
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @id
  displayName   String
  posts         Post[]      @relation("Author")
  comments      Comment[]   @relation("Author")
  feedsCreated  Feed[]      @relation("Author")
  feedsIncluded Feed[]
  likedPosts    Post[]      @relation("Likes")
  likedComments Comment[]   @relation("Likes")
  following     Follow[]    @relation("Following")
  followers     Follow[]    @relation("Followers")
  picture       String?
  firstName     String?
  lastName      String?
  birthDate     DateTime?
  bio           String?
  sexAtBirth    SexAtBirth?
  location      String?
}

enum SexAtBirth {
  Male
  Female
}

model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  author    Profile   @relation("Author", fields: [authorId], references: [userId])
  authorId  String
  likes     Profile[] @relation("Likes")
  comments  Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  author    Profile   @relation("Author", fields: [authorId], references: [userId])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  likes     Profile[] @relation("Likes")
}

model Feed {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  author    Profile   @relation("Author", fields: [authorId], references: [userId])
  authorId  String
  users     Profile[]
}
